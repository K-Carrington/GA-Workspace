What does document.write do?	document.write(str) takes a string of text and displays it in the browser, right where the &lt;script&gt; tag is located.
When people say HTML5, what do they really mean?	HTML5 markup + JavaScript APIs + CSS(3) = &quot;HTML5&quot;
internal model of the HTML page is called the ___	internal model of the HTML page is called the DOM<br><br />
After HTML page is loaded, __________ continues executing in the browser, changing the page, receiving events from it, or getting other data from the server.	After HTML page is loaded, JavaScript continues executing in the browser, changing the page, receiving events from it, or getting other data from the server.<br><br />
What does this do?:&nbsp;&nbsp;var blah;	Sets variable blah to value &quot;undefined&quot;, a JavaScript type.<br><br />
Variables must start with a ______, __________, or ___________.	Variables must start with a letter, underscore, or dollar sign.<br><br />
Why not run JavaScript in the &lt;head&gt;?	Because the DOM hasn't been created yet.<br><br />
How to take JavaScript from the &lt;head&gt; but make it run after the page is loaded?	function init() {<br>&nbsp;&nbsp;// stuff here<br>}<br>window.onload = init;<br><br />
Assign a &lt;div id=&quot;dude&quot;&gt;&lt;/div&gt; to a var	var dude = document.getElementById('dude');<br><br />
"You already got &lt;div id=""dude""&gt;&lt;/div&gt; as var dude. Now set its text to ""hey""."	dude.innerHTML = 'hey';<div>// or</div><div>dude.firstChild.nodeValue = 'hey';</div>
Get a random number between 0 and 27	Math.floor(Math.random() * 27)
You have an array arr, but don't know the length. Get a random element from it in 2 lines.	randomIndex = Math.floor(Math.random() * arr.length);<br />myValue = arr[randomIndex];<br /><br />
Get the value typed into &lt;input type=&quot;text&quot; id=&quot;email&quot; /&gt;<br><br />	emailInput = document.getElementById('email');<br>emailValue = emailInput.value;<br>// or join them:<br>emailValue = document.getElementById('email').value;<br><br />
"Given &lt;ul id=""animals""&gt;&lt;/ul&gt;, add &lt;li&gt;Brooklyn&lt;/li&gt; to it.<br /><br />"	var ul = document.getElementById('animals');<br />var li = document.createElement('li');<div>var t = document.createTextNode('Brooklyn');</div><div>li.appendChild(t);<br />// or ... li.innerHTML = 'Brooklyn';<br />ul.appendChild(li);<br /><br /></div>
function doSomething(a, b, c)&nbsp;&nbsp;&lt;-- What's the name for those things?<br><br />	Parameters. You define a function with parameters.<br><br />
doSomething(a, b, c)&nbsp;&nbsp;&lt;-- What's the name for those things?	Arguments. You call a function with arguments.
You define a function with __________. You call a function with _________.<br><br />	You define a function with parameters. You call a function with arguments.<br><br />
Even if a function has no parameters, you still need _____<br><br />	Even if a function has no parameters, you still need () - parentheses<br><br />
If a variable is declared outside a function, it's ______. If declared inside a function, it's _____.<br><br />	If a variable is declared outside a function, it's GLOBAL. If declared inside a function, it's LOCAL.<br><br />
If a function re-declares a global variable - same name - inside the function. What happens to each?<br><br />	They stay separate. The global variable is &quot;in the shadow of&quot; the local variable. Function uses the local one only.
Why not declare a variable without the &quot;var&quot; keyword?	Without &quot;var&quot;, all variables are global, even if declared inside a function. But future JavaScript may break this, so avoid it.
What happens if you call a function before it's been defined?	Function declarations can be anywhere in the script. The browser parses all JavaScript before it starts executing.
What happens if you call a global variable before it's been declared?	Global variables can be declared anywhere in the script. The browser parses all JavaScript before it starts executing.<br>Though it's recommended to define all global variables at the top of the script.
If two functions in different files are named the same, what happens?	The one the browser sees last will be the only one used.
Make an anonymous function alert popup when a page is loaded.<br /><br />	window.onload = function() { alert('hi!'); };
A JavaScript object is like a Ruby ____ or PHP _____	A JavaScript object is like a Ruby hash or PHP array<br><br />
Create an object with properties: name 'Derek', age 42. Afterwards, add location 'Singapore'.<br><br />	var person = {name: 'Derek', age: 42};<br>person.location = 'Singapore';<br><br />
An object's &quot;properties&quot; are like a hash or arrays &quot;____&quot;.<br><br />	An object's &quot;properties&quot; are like a hash or arrays &quot;keys&quot;.<br><br />
Go through all an object's properties, writing property and value.<br /><br />	"for (var prop in person) {<br />        document.write(""key is "" + prop + "" value is "" + person[prop]);<br />}<br /><br />"
Delete an object's property.<br><br />	delete person.location;<br><br />
Get the current time in milliseconds.<br /><br />	<div>Date.now();</div><div>// or</div>new Date().getTime();<br />// or<div>+new Date();</div>
"Make an object with property name=Muffin and a method ""bark"" that barks in an alert()<br /><br />"	var dog = {<br>&nbsp;&nbsp;name: 'Muffin',<br>&nbsp;&nbsp;bark: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;alert('bark!');<br>&nbsp;&nbsp;}<br>};<br><br />
A function in an object is called a ______.<br><br />	A function in an object is called a method.<br><br />
Make a dog contructor, with a name property and bark method (that barks in alert())<br><br />	function Dog(name) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.bark = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;alert('bark!');<br>&nbsp;&nbsp;};<br>}<br>// note semicolons!<br><br />
What object property has the URL of the current page?<br><br />	window.location<br><br />
What is window.location?<br><br />	property with the URL of the current page.<br><br />
What object property holds the function to call when the page is fully loaded?<br><br />	window.onload<br><br />
What is window.onload?<br><br />	property holding the function to call when the page is fully loaded<br><br />
What is window.document?<br><br />	An object - the property holding the DOM: Document Object Model.<br><br />
What does window.alert() do?<br><br />	method that displays an alert in the browser's window<br><br />
What does window.open() do?<br><br />	open a new browser window<br><br />
What object is the global environment?<br><br />	window<br><br />
Any global variables defined are also in the ______ namespace, so you reference them as ______.myvariable<br><br />	Any global variables defined are also in the window namespace, so you reference them as window.myvariable<br><br />
What are document.domain, document.title, document.URL?<br><br />	Properties of window.document:<br>domain = domain of the server<br>title = title of document<br>URL = URL of document<br><br />
Create a new HTML element<br /><br />	var e = document.createElement('li');<br /><br />
You created a li element and have a ul element. Now add li once to the end of the list, once to the top.<br /><br />	ul.appendChild(li);<br />ul.insertBefore(li, ul.firstChild);<br /><br />
JavaScript is made up of what 3 distinct parts?<br><br />	1. ECMAScript - provides the core functionality<br>2. DOM - Document Object Model - methods+interfaces for working with the content of a web page<br>3. BOM - Browser Object Model - methods+interfaces for interacting with the browser<br><br />
Which ECMA version is most-supported now? Which ECMA version is newer, partially-supported, but getting there?<br><br />	ECMA-262, third edition is mostly implemented now.<br>ECMA-262, fifth edition is not fully implemented now.<br><br />
HTML5 helped codify much of the ___________ as a formal spec. HTML5 helped dissipate a lot of ______ confusion.<br><br />	BOM (Browser Object Model)<br><br />
The _____ deals with the browser window. Any browser-specific extension to JavaScript is considered part of the _____.<br><br />	BOM (Browser Object Model)<br><br />
Support for cookies comes from the ______.<br><br />	BOM (Browser Object Model)<br><br />
Why use &lt;script&gt;&lt;/script&gt; instead of &lt;script /&gt;?<br><br />	Because &lt;script /&gt; was only for XHTML not HTML5, and IE won't acccept it!<br><br />
What's the downside to putting &lt;script src=&quot;blah&quot;&gt;&lt;/script&gt; inside &lt;head&gt;&lt;/head&gt;, and what's the modern solution?<br><br />	Downside was that the &lt;script&gt; must be completely parsed before loading will continue, leaving more room on a blank page.<br>Solution is to put &lt;script&gt;&lt;/script&gt; refs at the bottom of the page, before the &lt;/body&gt; tag, for faster-seeming response.<br><br />
What's the difference between defer and async attributes in &lt;script src=&quot;&quot;&gt;?<br><br />	defer goes in order (supposedly, though not reliably). async goes in any order.<br><br />
What's the same about defer and async attributes in &lt;script src=&quot;&quot;&gt;?<br><br />	Both begin downloading immediately, but don't execute until after &lt;/html&gt; is parsed.<br>Both are meant for JavaScript that doesn't alter the DOM as it executes.<br>But it's still best to put scripts at the bottom of the page.<br><br />
What HTML tag only shows to people without JavaScript?<br><br />	&lt;noscript&gt;<br>&lt;p&gt;Hey! Get JavaScript!&lt;/p&gt;<br>&lt;/noscript&gt;<br><br />
An __________ is the name of a variable, function, property or function argument.<br /><br />	An identifier is the name of a variable, function, property or function argument.<div>Identifier is just a name : the name that must start with [a-zA-Z], _, or $.<br /><br /></div>
How do you enable strict mode?<br><br />	&quot;use strict&quot;;&nbsp;&nbsp;&nbsp;// yes, in quotes<br>... at the top of the page, script, or function.<br><br />
Inside a function, what's the difference between &quot;var x = 1;&quot; and &quot;x = 1;&quot;?<br><br />	Using var makes it local. Omitting var makes it global.<br>It's recommended to not omit var. Hard to tell whether it was intentional or not.<br>Strict mode throws an error when var is omitted. Just use it.<br><br />
Define three variables in one statement.<br><br />	var age = 42, name = 'Derek', alive = true;<br><br />
In ECMAScript, there are five simple data types (&quot;primitive types&quot;) and one complex type. What are they?<br><br />	Undefined<br>Null<br>Boolean<br>Number<br>String<br>+ Object<br><br />
"""typeof"" operator will return one of six strings:<br /><br />"	&quot;undefined&quot;<br>&quot;boolean&quot;<br>&quot;number&quot;<br>&quot;string&quot;<br>&quot;function&quot;<br>&quot;object&quot; if object (other than function) or null<br><br />
Can you call &quot;typeof&quot; without parentheses?<br><br />	Yes, because it's an operator, not a function.<br>(typeof &quot;Derek&quot; == &quot;string&quot;)<br><br />
Why is null returned as a typeof &quot;object&quot;?<br><br />	null is considered to be an empty object reference.<br><br />
Doing this...<br>var whatever;<br>... will set its value to what?<br><br />	undefined<br><br />
Are these the same?<br>var whatever;<br>var whatever = undefined;<br><br />	Yes.&nbsp;&nbsp;But you should never explicity set a variable to be undefined.<br><br />
What one useful operation can be performed on an undeclared variable?<br><br />	typeof<br>typeof unDeclaredVar == &quot;undefined&quot;<br><br />
var dog = null;<br>alert(typeof dog);<br>... will say what?<br><br />	&quot;object&quot;<br><br />
null == undefined ? undefined == null ?<br><br />	true<br><br />
Any time an object is expected but not available, ____ should be used in its place. An empty object pointer.<br><br />	Any time an object is expected but not available, null should be used in its place. An empty object pointer.<br><br />
How are String, Number, and Object able to be used for &quot;if (x)&quot; flow-control statements?<br><br />	The Boolean() casting function is automatically performed by flow-control statements, converting the input to either true or false.<br>Boolean(&quot;hi&quot;) is true. Boolean(&quot;&quot;) is false.<br>Boolean(9) is true. Boolean(0) is false.<br>Boolean(anyObject) is true. Boolean(null) is false.<br>That's why the type of variable you're using in if () is crucial. If it's an object instead of string, you'll be surprised at result.<br><br />
var i = 023;&nbsp;&nbsp;// what is i and why?<br><br />	19&nbsp;&nbsp;because starting with 0 means octal number (and 2×8 + 3 = 19)<br><br />
var i = 0x2c;&nbsp;&nbsp;// what is i and why?<br><br />	44&nbsp;&nbsp;because starting with 0x means hex number (and 2×16 + 12(c) = 44)<br><br />
var i = 5.163e6;&nbsp;&nbsp;// what is i and why?<br><br />	5,163,000&nbsp;&nbsp;because the e makes it &quot;e-notation&quot;, means preceding should be multiplied by 10 to the __ power. (5.163 × 10⁶)<br><br />
var i = 5e-6;&nbsp;&nbsp;// what is i and why?<br><br />	0.000005&nbsp;&nbsp;because the e makes it &quot;e-notation&quot;, means preceding should be divided by by 10 to the __ power. (5 ÷ 10⁶)<br><br />
var i = 100.0;&nbsp;&nbsp;// what is i and why?<br><br />	100&nbsp;&nbsp;because ECMAScript tries to convert floating point numbers into integers when possible, to save memory<br><br />
Why does ECMAScript try to convert floating point numbers into integers?<br><br />	Floating point numbers take up twice as much memory as integers<br><br />
if (a + b == 0.3) { blah; }&nbsp;&nbsp;// why is this a bad idea, and likely to fail?<br><br />	Floating point numbers are inaccurate, and should not be tested against<br>(a + b might accidently equal 0.30000000001)<br><br />
What does JavaScript do with any number that is too big or small to represent?<br><br />	Infinity or -Infinity<br><br />
Check to make sure a number (i) is not too big or small to represent<br><br />	isFinite(i)<br><br />
10 / 0;<br><br />	NaN<br><br />
NaN == NaN ?<br /><br />	false. NaN is not equal to any value.<br><br />
Can i be converted into a number?<br><br />	isNaN(i) == false&nbsp;&nbsp;// if &quot;not a number&quot; is false, i can be converted into a number<br><br />
Number('0123');	123&nbsp;&nbsp;&nbsp;// leading zeroes are ignored<br><br />
Number(undefined);<br><br />	NaN<br><br />
Number(null);<br><br />	0<br><br />
Number('hi');<br><br />	NaN<br><br />
If I want an integer from a string, what's better than Number() and why?<br><br />	parseInt() because it's more suited for that<br>'' is NaN instead of 0, '123a' is 123, '22.5' is 22.<br><br />
Why is it good to always include a 2nd argument into parseInt(str, base)?<br><br />	If I don't include the radix (number of digits) it will guess whether binary, octal, hex, etc.<br>Better to include 10 as the 2nd argument.&nbsp;&nbsp;parseInt('0770', 10); // 770<br><br />
parseFloat('070.53.76');<br><br />	70.53&nbsp;&nbsp;// leading zeroes ignored. only one decimal point allowed. 2nd one = stopping point<br><br />
s = 'derek\tsivers\n';<br><br />	derek[tab]sivers[cr] because single-quote and double-quote are no different at all<br><br />
var age = 42;&nbsp;&nbsp;// convert age to a string<br /><br />	age.toString();<br />// or<div>String(age);&nbsp;</div>
var n = 90;&nbsp;&nbsp;// Convert n to an octal number<br><br />	n.toString(8);&nbsp;&nbsp;// &quot;132&quot;<br><br />
var n = 90;&nbsp;&nbsp;// Convert n to a hex number<br><br />	n.toString(16); // &quot;5a&quot;<br><br />
var dog;<br>String(dog);<br><br />	&quot;undefined&quot;<br><br />
Not sure whether a variable is null or undefined? What to use?<br><br />	String(var);&nbsp;&nbsp;// if null? &quot;null&quot; if undefined? &quot;undefined&quot; if false? &quot;false&quot;<br><br />
Core object property (every object has it) that tells the function used to create the object<br><br />	.constructor;<br><br />
Core object method (every object has it) to tell if a property exists on the object<br><br />	.hasOwnProperty('propertyName');<br><br />
Core object method (every object has it) to tell if the object is a prototype of another object<br><br />	.isPrototypeOf(obj2);<br><br />
Core object method (every object has it) to tell if a property is enumerable (if for-in will work)	.propertyIsEnumerable('propertyName');<br><br />
Core object method (every object has it) to return string representation of object appropriate for current locale<br><br />	.toLocaleString();<br><br />
Core object method (every object has it) to return string representation of object<br><br />	.toString();<br><br />
Core object method (every object has it) to return string, number, or boolean representation of object (usually string)<br><br />	.valueOf();<br><br />
var age = 42;<br>var newAge = ++age + 2;<br>// Now what are the values of age and newAge?<br><br />	43 and 45 - because increment changed the original then evaluated the operator<br><br />
var age = 42;&nbsp;&nbsp;// show four ways to increment this<br><br />	age = age + 1;<br>age += 1;<br>++age;<br>age++;<br><br />
var age = 42;&nbsp;&nbsp;// show four ways to decrement this<br><br />	age = age - 1;<br>age -= 1;<br>--age;<br>age--;<br><br />
What are the terms and difference between i++ and ++i?<br><br />	++i is &quot;prefix&quot; increment, changing the value before continuing evaluation.<br>i++ is &quot;postfix&quot; increment, changing the value after the containing statement has been evaluated.<br>If alone, no difference.&nbsp;&nbsp;&nbsp;But if part of another statement (age++ / 2) - big difference.<br><br />
var s = 'z';<br>s++;<br><br />	NaN<br><br />
var o = {valueOf: function() { return 5; } };<br />o += 1;<br /><br />	6<br><br />
What does ! return?<br><br />	A Boolean: converting the thing after it to Boolean, then reversing it.<br>(!false) //true<br>(!'hi') // false<br>(!NaN)&nbsp;&nbsp;&nbsp;// true<br>(!1234) // false<br><br />
!!'hi'&nbsp;&nbsp;// what returned? equivalent to what? what is this called?<br><br />	true. Same as Boolean('hi') since closest ! converts 'hi' Boolean, 2nd one reverses it<br>It's called &quot;Logical NOT&quot;<br><br />
var x = false;<br>var result = (x &amp;&amp; someUndeclaredThing);&nbsp;&nbsp;// What happens &amp; why?<br><br />	Nothing, because x is false, evaluation stops there, skipping what's after the &amp;&amp;.<br><br />
var x = true;<br>var result = (x &amp;&amp; someUndeclaredThing);&nbsp;&nbsp;// What happens &amp; why?<br><br />	An error because the first x is true, so it evaluated the undelared variable and threw an error.<br>If x was false, it would not have evaluated the 2nd half.<br><br />
var x = y || z;&nbsp;&nbsp;// what does this do? why use it?<br><br />	If y is not null or false, it uses y and never evaluates z.<br>If y is null or false, it uses z.<br>This is used often for variable assignment.<br><br />
5 + '5';<br><br />	'55'&nbsp;&nbsp;// doesn't care the order: if either one is a string, the other is converted to a string and concatenated<br><br />
var num1 = 5;<br>var num2 = 10;<br>var msg = 'The sum of 5 and 10 is ' + num1 + num2;<br>// Why is this wrong, and how can it be fixed?<br><br />	Wrong because it'll evaluate as strings, saying &quot;...510&quot;.&nbsp;&nbsp;Fixed like this:<br>var msg = 'The sum of 5 and 10 is ' + (num1 + num2);<br><br />
'Boy' &gt; 'ant'<br><br />	False, because it's evaluated ASCII value of first letter.<br>ASCII for upper-case letters is smaller than ASCII for lower-case letters.<br><br />
'a' &lt; 3<br />	False, because 'a' is attempted to turn into a number, but becomes NaN.<br />Anything compared against NaN is false.<br /><br />
null == undefined<br><br />	true<br><br />
NaN != NaN<br><br />	true<br><br />
false == 0<br><br />	true<br><br />
true == 1<br><br />	true<br><br />
true == 2<br><br />	false<br><br />
undefined == 0<br><br />	false<br><br />
null == 0<br><br />	false<br><br />
'5' == 5<br><br />	true<br><br />
'55' === 55<br /><br />	false<br /><br />
'12' !== 12<br><br />	true<br><br />
Which is more recommended, == or ===?&nbsp;&nbsp;Why?<br><br />	=== because of type-conversion issues with ==. Maintains data integrity.<br><br />
var num = (1, 2, 3, 4, 5);&nbsp;&nbsp;// what is num? why?<br><br />	5, because the comma operator returns the last item in the expression.<br><br />
do {<br>&nbsp;&nbsp;statement;<br>} while (expression);<br>// Why use this form instead of this:<br>while (expression) {<br>&nbsp;&nbsp;statement;<br>}<br><br />	Use &quot;pre-test&quot; loop when you want the body to execute at least once before exiting.<br>Use &quot;post-test&quot; loop when you want to check expression before executing body.<br><br />
for (;;) { doSomething(); }&nbsp;&nbsp;&nbsp;// what does this do?<br><br />	Infinite loop<br><br />
Write a simple &quot;for&quot; statement<br><br />	for(var i=0; i &lt; 10; i++) {&nbsp;&nbsp;&nbsp;// don't forget var!<br>&nbsp;&nbsp;doSomething(i);<br>}&nbsp;&nbsp;<br><br />
"Write a simple ""for-in"" statement to see properties of an object<br /><br />"	for(var propName in window) {&nbsp;&nbsp;// don't forget var!<br>&nbsp;&nbsp;document.write(propName);<br>}<br><br />
// What's wrong with this code?<br />var albums;<br />for(var album in albums) {<br />&nbsp;&nbsp;document.write(album);<br />}<br /><br />	for-in will throw an error if the object iterated over is null or undefined<br />// NOTE: I can't make this happen in Node. Maybe not a problem anymore?
Write a switch/case statement.<br><br />	switch(domain) {<br>&nbsp;&nbsp;case 'sivers.org':<br>&nbsp;&nbsp;&nbsp;&nbsp;doSivers();<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 'muckwork.com':<br>&nbsp;&nbsp;&nbsp;&nbsp;doMuckWork();<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;doScreaming();<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br><br />
function doSomething(a1, a2) { alert(&quot;see &quot; + a1 + a2); }<br>doSomething('hi');<br>// what does this do:?<br><br />	'see hi' - because a2 is undefined<br><br />
function doSomething(a1, a2) { alert(&quot;see &quot; + a1 + a2); }<br>doSomething('hi', 'there', 'george');<br>// what does this do:?<br><br />	'see hithere' - because additional arguments are ignored<br><br />
function doSomething() { blah; }<br>doSomething('hi', 'there', 'george');<br>// How can I access the arguments passed into this?<br><br />	arguments[0];<br><br />
Write a sum function that sums up an infinite number of arguments.<br /><br />	function sum() {<br />&nbsp; var total = 0;<br />&nbsp;&nbsp;for(var i=0; i &lt; arguments.length; i++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;total += arguments[i];<br />&nbsp;&nbsp;}<br />&nbsp;&nbsp;return total;<br />}<br /><br />
var a = 5;<br />var b = a;<br />a += 1;<br />// what are a and b?<br /><br />	a is 6, b is 5. the b = a assignment copied the primitive 5 into both, but unconnected.<br /><br />
var a = new Object();<br>var b = a;<br>a.name = 'Derek';<br>// what are a and b?<br><br />	both are references to the object that now has .name 'Derek'. the assignment copied the reference. still only one object.<br><br />
function addTen(num) { num += 10; return num; }<br>var i = 40;<br>addTen(i);<br>// what is i now?<br><br />	40, because passing arguments is copying to another variable: primitive types pass value, not reference.<br><br />
function addName(obj) { obj.name = 'Derek'; }<br>var o = new Object();<br>addName(o);<br>// what is o.name now?<br><br />	'Derek', because passing arguments is copying to another variable: objects pass reference to same object.<br><br />
function addName(obj) {<br />&nbsp;&nbsp;obj.name='Derek';<br />&nbsp;&nbsp;obj = new Object();<br />&nbsp;&nbsp;obj.name='Saj';<br />}<br />var o = new Object();<br />addName(o);<br />// what is o.name now?<br /><br />	'Derek', because the o was passed by reference, but then new obj was made inside, it's local only.<br /><br />
var u;<br>typeof u;<br><br />	undefined<br><br />
var n = null;<br>typeof n;<br><br />	object<br><br />
How to find out if a is an array?<br /><br />	a instanceof Array<div>// or</div><div>Array.isArray(a)<br /><br /></div>
How to find out if r is a regex?<br><br />	r instanceof RegExp<br><br />
for(var i=0; i &lt; 10; i++) {<br>&nbsp;&nbsp;doSomething(i);<br>}<br>alert(i);         // what is i here, and why?<br><br />	10, because there is NO BLOCK-LEVEL SCOPE in JavaScript.<br>if{} for{} and such - the vars are just in the global scope still.<br><br />
function add(n1, n2) {<br />&nbsp;&nbsp;sum = n1 + n2;<br />&nbsp;&nbsp;return sum;<br />}<br />var result = add(12, 24);<br />alert(sum);&nbsp;&nbsp;&nbsp;// what is sum here, and why?<br /><br />	"36, because ""var"" wasn't used inside function, making ""sum"" a global variable.<br />avoid this. always declare variables. strict mode requires it.<br /><br />"
deference a global variable I'm not using anymore<br><br />	globalPerson = null;<br><br />
What's the difference between typeof and instanceof ?<br /><br />	typeof will tell its primitive type ('string', 'number', 'boolean', 'object', 'undefined')<br />instanceof will tell its reference type (RegExp, Array, etc.)<br /><br />
show two ways to make a new object<br><br />	var p = new Object();<br>var p = {};&nbsp;&nbsp;// called &quot;object literal&quot;<br><br />
Make a function, showAlbum(args), taking only one object as argument, showing its name, title, and price.&nbsp;&nbsp;Call it with a literal object.<br><br />	function showAlbum(args) {<br>&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;if(typeof args.name == 'string') {<br>&nbsp;&nbsp;&nbsp;&nbsp;output += 'Artist Name: ' + args.name + '\n';<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if(typeof args.title == 'string') {<br>&nbsp;&nbsp;&nbsp;&nbsp;output += 'Album Title: ' + args.title + '\n';<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if(typeof args.price == 'number') {<br>&nbsp;&nbsp;&nbsp;&nbsp;output += 'Price: $' + args.price + '\n';<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;alert(output);<br>}<br>showAlbum({name: 'Hit Me', title: 'Greatest Hits', price: 12});<br><br />
Object ________ have become the preferred way of passing a large number of ________ arguments to a function.<br><br />	Object literals ({}) have become the preferred way of passing a large number of optional arguments to a function.<br><br />
Use _____ arguments for those that are required, and an ______ _______ for multiple optional arguments.<br><br />	Use named arguments for those that are required, and an object literal for multiple optional arguments.<br><br />
What is the main reason to use bracket-notation (person['name']) instead of dot-notation (person.name) for property access?<br><br />	Using variables for the property name.<br>var propName = 'age';<br>person[propName]; // same as person.age<br><br />
var a = new Array(5);<div>// what does this do?<br /></div>	create an empty array with a length of 5<br><br />
var a = new Array('x'); // what does this do?<br><br />	create an array with 'x' as the sole item<br><br />
var a = Array('x', 'y', 'z');&nbsp;&nbsp;// why not &quot;new&quot;?<br><br />	&quot;new&quot; operator is optional when creating an Array<br><br />
show array literal notation:<br><br />	var a = ['dog', 'gone', 'cat'];<br><br />
var a = ['dog', 'gone', 'cat'];<br>// show two ways to add 'bird' to the end of the array<br><br />	a[3] = 'bird';<br>a.push('bird');<br><br />
var a = ['dog', 'gone', 'cat', 'bird'];<br />// trim the array down to only 2 elements<br /><br />	a.length = 2;<br />// or...<div>a.splice(2);</div>
is a an Array?<br><br />	if(a instanceof Array) { }<br><br />
ECMAScript v5 new way of testing if a is an array:<br><br />	if(Array.isArray(a)) { }<br><br />
var a = ['dog', 'gone', 'cat'];<br />// what are 2 ways of turning it into 'dog,gone,cat' string?<br /><br />	a.join(',');<br />a.toString(); &nbsp;// does it like that automatically<br /><br />
var a = [0, 1, 5, 10, 15];<br>// what order will a.sort() return them in, and why?<br><br />	0, 1, 10, 15, 5 - because sort() uses the string value<br><br />
var a = [4, 98, 1, 15, 2];<br />// sort these in numeric order<br /><br />	<div>a.sort(function(v1, v2) { return v1 - v2; });</div><div>// or ...</div>function compare(value1, value2) {<br />&nbsp;&nbsp;if(value1 &lt; value2) {<br />&nbsp;&nbsp;&nbsp;&nbsp;return -1;<br />&nbsp;&nbsp;} else if (value1 &gt; value2) {<br />&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br />&nbsp;&nbsp;} else {<br />&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br />&nbsp;&nbsp;}<br />}<br />a.sort(compare);<br />
var a = ['a', 'b', 'c'];<br>a.concat('d', ['e', 'f']);<br>// what is a now?<br><br />	a is still abc.<br>.concat() returns a newly constructed array. doesn't alter the original. (unlike Ruby)<br><br />
var a = ['a', 'b', 'c', 'd'];<br>a.slice(2);&nbsp;&nbsp;&nbsp;// returns what?<br><br />	['c', 'd'];&nbsp;&nbsp;&nbsp;// single param starts at that index and goes to end<br><br />
var a = ['a', 'b', 'c', 'd'];<br />a.slice(1, 2);&nbsp;&nbsp;&nbsp;// returns what?<br />	['b'];&nbsp;&nbsp;&nbsp;// 2nd param of slice() means end-index, and stops BEFORE that!<br /><br />
var a = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];<br>a.slice(-4, -2);&nbsp;&nbsp;// returns what?<br><br />	['d', 'e'];&nbsp;&nbsp;// 2nd param of slice() says which index to stop BEFORE<br><br />
var x = ['a', 'b', 'c', 'd', 'e'];<br>var y = x.splice(2, 2);<br>// what is x? what is y?<br><br />	x is ['a', 'b', 'e'];<br>y is ['c', 'd'];<br>// 2nd param of splice() is NUMBER OF ITEMS TO DELETE! - not an index<br><br />
var x = ['a', 'b', 'c', 'd', 'e'];<br>var y = x.splice(2, 2, 'water', 'chocolate');<br>// what is x? what is y?<br><br />	x is ['a', 'b', 'water', 'chocolate', 'e'];<br>y is ['c', 'd'];<br>// 2nd param of splice() is NUMBER OF ITEMS TO DELETE! - not an index<br><br />
var x = ['a', 'b', 'c', 'd', 'e'];<br>var y = x.splice(2, 0, 'water');<br>// what is x? what is y?<br><br />	x is ['a', 'b', 'water', 'c', 'd', 'e'];<br>y is [];<br><br />
What's the difference between .slice() and .splice()?<br><br />	.slice() COPIES out a sub-array, starting from point 1, stopping before point 2<br>.splice() DELETES part of the original array, from point 1, going how many items. optionally can insert arguments 3+<br><br />
What's the difference between the 2nd argument of slice() and splice()?<br><br />	slice() 2nd arg is index point to stop before<br>splice() 2nd arg is how many items to delete<br><br />
var a = ['a', 'e', 'f'];<br>// insert 'b', 'c', 'd' between 'a' and 'e'<br><br />	a.splice(1, 0, 'b', 'c', 'd');<br><br />
var a = ['a', 'B', 'C', 'e', 'f'];<br>// replace the B &amp; C, inserting 'b', 'c', 'd' there<br><br />	a.splice(1, 2, 'b', 'c', 'd');<br><br />
var a = ['d', 'e', 'r', 'e', 'k'];<br>// find the index of the first 'e', then the index of the last 'e'<br><br />	a.indexOf('e');                // 1<br>a.lastIndexOf('e');        // 3<br><br />
var a = ['d', 'e', 'r', 'e', 'k', ' ', 's', 'i', 'v', 'e', 'r', 's'];<br>// find the index of the first 'e' in the 2nd word<br><br />	a.indexOf('e', 5);        // 9 <br>// 2nd param skips that many items from beginning<br><br />
var a = ['d', 'e', 'r', 'e', 'k', ' ', 's', 'i', 'v', 'e', 'r', 's'];<br>// find the index of the LAST 'e' in the FIRST word<br><br />	a.lastIndexOf('e', 6);        // 3 <br>// 2nd param skips that many items from the end<br><br />
// for array a, are ALL letters greater than 'e'?<br>var a = ['d', 'e', 'r', 'e', 'k'];<br><br />	a.every(function(item) { return (item &gt; 'e'); });<br><br />
// for array a, are ANY letters greater than 'e'?<br>var a = ['d', 'e', 'r', 'e', 'k'];<br><br />	a.some(function(item) { return (item &gt; 'e'); });<br><br />
var a = ['d', 'e', 'r', 'e', 'k'];<br>// get an array of the letters greater than 'e'<br><br />	a.filter(function(item) { return (item &gt; 'e'); });<br><br />
var a = ['d', 'e', 'r', 'e', 'k'];<br>// add '!' to each letter in this array (return new array)<br><br />	a.map(function(item) { return (item + '!'); });<br><br />
"var a = ['d', 'e', 'r', 'e', 'k'];<br />// for each item in a, alert ""item #{item} is at index #{index}""<br /><br />"	<div>for(var i = 0, len = a.length; i &lt; len; i++) {</div>&nbsp; alert('item ' + a[i] + ' is at index ' + i);<br /><div>}</div><div>// in ECMA 5:</div>a.forEach(function(item, index) {<br />&nbsp;&nbsp;alert('item ' + item + ' is at index ' + index);<br />});<br /><br />
ECMAScript 5 has 5 array iterator methods: every(), some(), filter(), map(), and forEach().<br>Each needs a function as its first parameter.&nbsp;&nbsp;What 3 arguments does it send to that function?<br><br />	(item, index, array)<br>// example: ary.forEach(function(item, index, array) { doSomething(); });<br><br />
What JavaScript boolean-returning array methods are like Ruby's .all? and .any?<br><br />	.every()<br>.some()<br><br />
var a = [5, 10, 15, 20];<br />// get a sum of these numbers<br /><br />	a.reduce(function(prev, cur) { return prev + cur; });<br /><br />
array.reduce() requires a function as first parameter.<br>What are the arguments sent to that function, and what do they do?<br><br />	function(prev, cur, index, array) {}<br>On the first loop through, prev gets index 0, cur gets index 1<br>On subsequent loops, prev gets the value returned from the function, and cur goes to the next index.<br>index is the index, and array the array<br><br />
How is the Date() type stored?<br><br />	Number of milliseconds since 1/1/70 midnight UTC<br><br />
d = new Date();&nbsp;&nbsp;&nbsp;// what is d?<br /><br />	current date and time. &nbsp;Example:<br /><div><div>&gt; String(d);</div><div>'Tue Dec 11 2012 10:22:38 GMT+1300 (NZDT)'</div><div>&gt; Number(d);</div><div>1355174558512</div></div><div><br /></div>
Make a Date object from the string 'January 12, 2012'<br><br />	var d = new Date(Date.parse('January 12, 2012'));<br>... or ...<br>var d = new Date('January 12, 2012');<br><br />
Why does new Date('2012-01-12') work?<br><br />	Because Date constructor calls Date.parse(str) behind the scenes if a string is passed to new Date()<br><br />
new Date(Date.UTC(2011, 7, 15));<br>// What date and timezone is this creating?<br><br />	August(!) 15, 2011.&nbsp;&nbsp;Because it counts January as 0-month!&nbsp;&nbsp;Timezone = UTC.<br><br />
new Date(2011, 9, 22);<br>// What date and timezone is this creating?<br><br />	October(!) 22, 2011.&nbsp;&nbsp;Because it counts January as 0-month!&nbsp;&nbsp;Timezone = LOCAL<br>... And when constructed with integer params it calls Date.UTC() in the background.<br><br />
new Date('hi'); // What is returned?<br><br />	NaN<br><br />
Show two ways to get the current timestamp in milliseconds as a number.<br /><br />	Date.now();        // ECMAScript 5<br />+new Date();        // more compatible with all. + converts Date to integer.<br />Number(new Date()); &nbsp;// ditto
Given date object d, get it as a string appropriate to the locale of the person's browser<br /><br />	d.toLocaleString();<br />
Why does date.valueOf() return the milliseconds?<br><br />	So it can be used for comparison.&nbsp;&nbsp;Comparisons call .valueOf() to get comparison values.<br>var d1 = new Date(2011, 4, 15);<br>var d2 = new Date(2011, 7, 22);<br>if (d1 &lt; d2) { blah(); }<br><br />
Why be careful of using Date's .toDateString(), .toTimeString(), .toLocaleDateString(), .toLocaleTimeString()?<br /><br />	Because they vary so much from browser to browser, they won't be consistent.<br /><br />
Get the year from date d<br><br />	d.getFullYear();<br><br />
Get the month from date d.&nbsp;&nbsp;(What is returned if September?)<br><br />	d.getMonth();&nbsp;&nbsp;// 8 = September. 0-indexed months.<br><br />
Get the day-of-the-month (1-31) from date d.<br><br />	d.getDate();<br><br />
Get the weekday from date d.&nbsp;&nbsp;(What is returned if Tuesday?)<br><br />	d.getDay();&nbsp;&nbsp;&nbsp;// 0-6: 0 = Sunday, 2 = Tuesday, 6 = Saturday<br><br />
Get the hour from date d.<br><br />	d.getHours();        // plural!<br><br />
Get the minute from date d.<br><br />	d.getMinutes();        // plural!<br><br />
Get the second (0-59) from date d.<br><br />	d.getSeconds();        // plural!<br><br />
Use RegExp to search for an @sivers.org address in a string, case-insensitive, showing the username (before @) and entire email address.<br><br />	var exp = /([a-z0-9_-]*)@sivers.org/i;<br>var str = 'My email is derek@sivers.ORG but no spam, OK?';<br>var matches = exp.exec(str);<br>var rez = 'The whole thing is ' + matches[0] + ' and username is ' + matches[1];<br><br />
var s = 'Some URLs are http://sivers.org/ and http://muckwork.com and http://woodegg.com/ - for now.';<br>// get an array of all the http URLs from this string (anything from http:// to whitespace is OK)<br><br />	var urls = [];<br>var exp = /http:\/\/\S*/g;&nbsp;&nbsp;// ← g is crucial!<br>var matches = exp.exec(s);<br>while (matches != null) {<br>&nbsp;&nbsp;urls.push(matches[0]);<br>&nbsp;&nbsp;matches = exp.exec(s);<br>}<br><br />
Does the string s contain /\d{4}-\d{2}-\d{2}/ ? Just boolean yes/no.<br><br />	var re = /\d{4}-\d{2}-\d{2}/;<br>re.test(s);<br><br />
Function names are simply pointers to ________ _______.<br><br />	Function names are simply pointers to function objects.<br><br />
Show two ways to create a function &quot;sum&quot; that returns the sum of 2 arguments.<br><br />	function sum(num1, num2) { return num1 + num2; }<br>var sum = function(num1, num2) { return num1 + num2; };&nbsp;&nbsp;// final semicolon because of variable initialization!<br><br />
function sum(num1, num2) { return num1 + num2; }<br>var anotherSum = sum;<br>sum = null;<br>anotherSum(10, 15);&nbsp;&nbsp;&nbsp;// What happens here?<br><br />	It sums the numbers, because variable names are just pointers to the function object. Nulling the original variable didn't get rid of the function.<br><br />
// What's the difference between these two ways to create a function?<br>function sum(num1, num2) { return num1 + num2; }<br>var sum = function(num1, num2) { return num1 + num2; };<br><br />	Function declarations (&quot;function sum&quot;) are executed before any other code.<br>Function expressions (&quot;sum = function()&quot;) would be executed in order, like any variable assignment.<br><br />
alert(sum(10, 20));<br>function sum(num1, num2) { return num1 + num2; }<br>// Does this work?&nbsp;&nbsp;Why or why not?<br><br />	Yes, because function declarations are evaluated before any other code is run.<br><br />
var albums = [{name: 'Beatles', title: 'White Album', price: 15}, {name: 'Zeppelin', title: 'II', price: 7}];<br />// make a function by(propName) to pass to array.sort, so I can sort albums by any property.<br />// (hint: function returns a function. and this is awesome!)<br /><br />	function by(propName) {<br />&nbsp;&nbsp;return function(obj1, obj2) {<br />&nbsp; &nbsp; var v1 = obj1[propName];<br />&nbsp; &nbsp; var v2 = obj2[propName];<br />&nbsp;&nbsp;&nbsp;&nbsp;if (v1 &lt; v2) { return -1; }<br />&nbsp;&nbsp;&nbsp;&nbsp;else if (v1 &gt; v2) { return 1; }<br />&nbsp;&nbsp;&nbsp;&nbsp;else { return 0; }<br />&nbsp;&nbsp;};<br />}<br />albums.sort(by('name'));<br />alert('First by name is ' + albums[0].name);<br />albums.sort(by('title'));<br />alert('First by title is ' + albums[0].title);<br /><br />
How can a function recursively call itself, without referring to itself by name?<br><br />	arguments.callee<br>// arguments object has property .callee - the function that owns the arguments. example:<br>function re(str) {<br>&nbsp;&nbsp;// do something here<br>&nbsp;&nbsp;if (str != '') {<br>&nbsp;&nbsp;&nbsp;&nbsp;return arguments.callee(str);<br>&nbsp;&nbsp;}<br>}<br><br />
An object is an instance of a specific _________ ____.<br><br />	An object is an instance of a specific reference type.<br><br />
_________ _____ are sometimes called object definitions, because they describe the properies and methods that objects should have.<br><br />	Reference types are sometimes called object definitions, because they describe the properies and methods that objects should have.<br><br />
New objects are created by using the `new` operator followed by a ___________.&nbsp;&nbsp;// var person = new Object();<br><br />	New objects are created by using the `new` operator followed by a constructor.&nbsp;&nbsp;// var person = new Object();<br><br />
________ are functions that have access to variables from another function's scope.<br><br />	Closures are functions that have access to variables from another function's scope.<br><br />
Closures are often accomplished by creating a ________ inside a ________.<br><br />	Closures are often accomplished by creating a function inside a function.<br><br />
Show basic syntax (minus guts) of an anonymous function used as a block scope (aka &quot;private scope&quot;)<br><br />	(function() {<br>&nbsp;&nbsp;// block code here<br>})();<br>// Anonymous function, inside parentheses, called immediately.<br>// aka &quot;immediately invoked function&quot;<br><br />
(function() { blah(); })();&nbsp;&nbsp;// what is this, and why is it used?<br><br />	An immediately invoked function, used for block scope (aka private scope).<br>Variables inside it are for it-only, and destroyed when done.<br><br />
(function() { blah(); })();&nbsp;&nbsp;// why does it need to be surrounded by parens?<br><br />	Because this...<br>function() { blah(); }(); <br>... is illegal syntax.&nbsp;&nbsp;Function declarations can't be immediately followed by parens.<br>But function expressions can. Surrounding parens turn function declaration into expression.<br>(function() { blah(); })(); <br><br />
(function() {<br>&nbsp;&nbsp;var now = new Date();<br>&nbsp;&nbsp;if(now.getMonth() == 0 &amp;&amp; now.getDate() == 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;alert('Happy new year!');<br>&nbsp;&nbsp;}<br>})();<br>// Why would this code be surrounded by an immediately invoked anonymous function?<br><br />	To keep &quot;now&quot; a local not global variable. Quick use and destroy. Unclutter globals and memory.<br><br />
Make a Person constructor with 1 param: name. Inside make getName() and setName(name) functions. Use it.<br><br />	function Person(name) {<br>&nbsp;&nbsp;this.getName = function() { return name; };<br>&nbsp;&nbsp;this.setName = function(str) { name = str; };<br>}<br>p = new Person('Derek');<br>alert(p.getName());<br>p.setName('Saj');<br>alert(p.getName());<br><br />
What's the downside of the constructor pattern? (&quot;It's flawed because...&quot;)<br><br />	New methods are created for each instance.<br><br />
Try to open http://sivers.org/ in a new browser window, then check to see if it was blocked.<br /><br />	var blocked = false;<br />try {<br />&nbsp; var nu = window.open('http://sivers.org/', '_blank');<br />&nbsp; if (nu == null) {&nbsp;&nbsp;// built-in blocking makes this null<br />&nbsp; &nbsp; blocked = true;<br />&nbsp; }<br />} catch (ex) {        // popup-blocking plugins make it raise an error<br />&nbsp; blocked = true;<br />}<br />if (blocked) {<br />&nbsp; alert('blocked!');<br />}<br /><br />
Make a &quot;BOO!&quot; alert pop up in 4 seconds.<br><br />	setTimeout(function() {<br>&nbsp;&nbsp;alert('BOO!');<br>}, 4000);<br><br />
What does setTimeout(function, milliseconds) return?<br /><br />	A unique ID (object or integer) that is the identifier for the timeout, and can be used to cancel it.<br />// Example:<div>var timeoutId = setTimeout(function() { alert('BOOM!'); }, 9000);</div><div>clearTimeout(timeoutId);</div><div><br /></div>
"Set a ""BOO!"" alert to pop up in 9 seconds, but then cancel it.<br /><br />"	var tid = setTimeout(function() {<br />&nbsp;&nbsp;alert('BOO!');<br />}, 9000);<br />clearTimeout(tid);<br /><br />
"Not using setInterval (because they say it's best to avoid them) make a numbered alert every 2 seconds, stopping with an ""OK, done."" after 5 times.<br /><br />"	var num = 0;<br />function alertOrStop() {<br />&nbsp;&nbsp;num++;<br />&nbsp;&nbsp;if (num &lt;= 5) {<br />&nbsp;&nbsp;&nbsp;&nbsp;alert('Alert# ' + num);<br />&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(alertOrStop, 2000);<br />&nbsp;&nbsp;} else {<br />&nbsp;&nbsp;&nbsp;&nbsp;alert('OK, done.');<br />&nbsp;&nbsp;}<br />}<br />setTimeout(alertOrStop, 2000);<br /><br />
What's the function for the alert box that, instead of just giving [OK] button, gives [OK] and [Cancel] buttons?<br><br />	confirm()<br><br />
What does confirm() return?<br><br />	true if they click [OK]<br>false if they click [Cancel]<br><br />
Run deleteEverything() method only after an alert asking user if they are sure (with [OK] and [Cancel] button options).<br><br />	if(confirm('Are you SURE you want to delete EVERYTHING?')) {<br>&nbsp;&nbsp;deleteEverything();<br>&nbsp;&nbsp;alert('OK. Deleted!');<br>} else {<br>&nbsp;&nbsp;alert('phew!');<br>}<br><br />
Popup an alert box that asks their name, then use what they entered to say hello, or try again if they didn't enter anything.<br><br />	var name = null;<br>while(name == null || name == '') {<br>&nbsp;&nbsp;name = prompt('Your name?', '');<br>}<br>alert('Hi ' + name);<br><br />
What's the difference between window.location and document.location<br /><br />	Nothing. They point to the exact same object.<br /><br />
Get the current URL<br><br />	location.href<br><br />
Get just the current filename or directory part of the URL<br><br />	location.pathname<br><br />
Get the entire query string (?a=b&amp;c=d) from the URL<br><br />	location.search<br><br />
Get the URL hash ID (#contents) from the URL<br><br />	location.hash<br><br />
Get 'https:' if the current page is SSL, or 'http:' if not.<br><br />	location.protocol<br><br />
Get the name of the current server<br><br />	location.hostname<br><br />
Show 3 ways to send the browser URL to http://sivers.org/ - most popular first<br><br />	location.href('http://sivers.org/');<br>location.assign('http://sivers.org/');<br>window.location('http://sivers.org/');<br>location.replace('http://sivers.org/');&nbsp;&nbsp;// NOTE: disables back button<br><br />
Send the browser's URL to http://sivers.org/ - so that back arrow won't go back to the sending page. (Won't put previous page in browser history.)<br><br />	location.replace('http://sivers.org/');
Add &quot;?css=plain&quot; to current URL.&nbsp;&nbsp;(reloading page with it)<br><br />	location.search = '?css=plain';<br><br />
Refresh the current page - even if cached<br><br />	location.reload();<br><br />
Refresh the current page - no cache - re-getting from server<br /><br />	location.reload(true);<br /><br />
What object's properties do you use to determine browser type? (And why is it called that?)	navigator - (because it was introduced by Netscape Navigator)
// Why is this like this?<br />function hasIEPlugin(name) {<br />&nbsp;&nbsp;try {<br />&nbsp;&nbsp;&nbsp;&nbsp;new ActiveXObject(name);<br />&nbsp;&nbsp;&nbsp;&nbsp;return true;<br />&nbsp;&nbsp;} catch (ex) {<br />&nbsp;&nbsp;&nbsp;&nbsp;return false;<br />&nbsp;&nbsp;}<br />}<br />function hasQuickTime() {<br />&nbsp;&nbsp;var result = hasPlugin('QuickTime');<br />&nbsp;&nbsp;if(!result) {<br />&nbsp;&nbsp;&nbsp;&nbsp;result = hasIEPlugin('QuickTime.QuickTime');<br />&nbsp;&nbsp;}<br />&nbsp;&nbsp;return result;<br />}	Because IE doesn't have usual plugins, the only way to check is to make an ActiveXObject COM object and catch if it fails.
Determine the screen's current width and height, and available width and height.	screen.width;<br>screen.height;<br>screen.availWidth;<br>screen.availHeight;
Go back one page.	history.back();<br>// ...or...<br>history.go(-1);
check if someNode is an Element node	if (someNode.nodeType == 1) { }
check if someNode is an Attribute node	if (someNode.nodeType == 2) { }
check if someNode is a Text node	if (someNode.nodeType == 3) { }
what is DOM node nodeType 1?	Element
what is DOM node nodeType 2?	Attribute
what is DOM node nodeType 3?	Text
How does this help remember DOM nodeType?&nbsp;&nbsp;&lt;12&gt;3&lt;/1&gt;	1 is nodeType Element<br>2 is nodeType Attribute<br>3 is nodeType Text<br>So if &lt;p class=&quot;hi&quot;&gt;Hello&lt;/p&gt;, p is 1, class=&quot;hi&quot; is 2, Hello is 3.
function f() { a=10; return; }<br>What will this return?	undefined
var h = {'cat': 'Charvel', 'dog': 'Muffin'};<br />// write a function returning true/false to see if incoming object has a property of 'price'	function hasPrice(o) {<br />&nbsp;&nbsp;return('price' in o);<br />}
Every string has a ___________ property, that returns a copy of the string in upper case. Example: 'hi'.___________();	Every string has a toUpperCase property, that returns a copy of the string in upper case. Example: 'hi'.toUpperCase();
Write a function called startsWith that takes two string arguments. Returns true when the first argument starts with the characters in the second argument, and false otherwise.	function startsWith(bigStr, smlStr) {<br />&nbsp;&nbsp;return(bigStr.slice(0, smlStr.length) == smlStr);<br />}
Write a forEach(array, function) function. Then use it in a sum(numArray) function.	function forEach(aray, funkshun) {<br />&nbsp;&nbsp;for(var i = 0; i &lt; aray.length; i++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;funkshun(aray[i]);<br />&nbsp;&nbsp;}<br />}<br />function sum(numArray) {<br />&nbsp;&nbsp;var total = 0;<br />&nbsp;&nbsp;forEach(numArray, function(num) {<br />&nbsp;&nbsp;&nbsp;&nbsp;total += num;<br />&nbsp;&nbsp;});<br />return total;<br />}
Write a function like Ruby's map, but with this syntax: map(function, array)	function map(funk, arr) {<br />&nbsp;&nbsp;var newArr = [];<br />&nbsp;&nbsp;for(var i=0; i &lt; arr.length; i++) {<br />&nbsp;&nbsp;&nbsp;&nbsp;newArr.push(funk(arr[i]));<br />&nbsp;&nbsp;}<br />&nbsp;&nbsp;return newArr;<br />}
Write this: &quot;if someNode is an element get its tag name&quot;	if(someNode.nodeType == 1) {<br>  var name = someNode.nodeName;<br>}
for someNode, get its value	someNode.nodeValue;
Each node has a __________ property, containing a ________ - an ordered list of nodes.	Each node has a childNodes property, containing a NodeList - an ordered list of nodes.
________ objects are unique because they're actually queries being run against the DOM structure, so changes will be reflected in ________ objects automatically.	NodeList objects are unique because they're actually queries being run against the DOM structure, so changes will be reflected in NodeList objects automatically.
How many child nodes does someNode have?	someNode.childNodes.length;
get the 2nd child node of someNode	someNode.childNodes[1];
Each node has a __________ property, pointing to its parent in the document tree.	Each node has a parentNode property, pointing to its parent in the document tree.
What is the sibling node before someNode?	someNode.previousSibling;
What is the sibling node after someNode?	someNode.nextSibling;
Check to see if someNode is the last node in the parent's childNodes list.	if(someNode.nextSibling === null) { alert('No next! I am last!'); }
Check to see if someNode is the first node in the parent's childNodes list.	if(someNode.previousSibling === null) { alert('No previous! I am first!'); }
What is the first child node of someNode?	someNode.firstChild;<br>// or<br>someNode.childNodes[0];
What is the last child node of someNode?	someNode.lastChild;<br>// or<br>someNode.childNodes[someNode.childNodes.length - 1];
To see if someNode has child nodes, you could see if someNode.childNodes.length === 0, but what's another efficient way?	Boolean : someNode.hasChildNodes();
What is the quick way to get from someNode to its document node (that represents the entire DOM document)?	someNode.ownerDocument;   // every node has this property
If ulNode is a ul list with a few items, take its last item and move it to the start of the list. (Hint: one-liner.)	ulNode.insertBefore(ulNode.lastChild, ulNode.firstChild);
If ulNode is a ul list with a few items, take its first item and move it to the end of the list. (Hint: one-liner.)	ulNode.appendChild(ulNode.firstChild);
If ulNode is a ul list with a few items, take its last item and move it up one. (Hint: one-liner.)	ulNode.appendChild(ul.lastChild.previousSibling);<br />// Actually moving the 2nd-to-last one down to the end, which is the same thing. &nbsp; ☺<br /><div>// Because this one does not work...<br />// ulNode.insertBefore(ulNode.lastChild, ulNode.lastChild);</div>
replace the first child of ulNode with the last child (removing the last)	ulNode.replaceChild(ulNode.lastChild, ulNode.firstChild);
copy the last child of ulNode and replace the first child with it.	ulNode.replaceChild(ulNode.lastChild.cloneNode(true), ulNode.firstChild);
What is the method to copy someNode? And what is its one parameter?	.cloneNode(true);   // deep copy: entire subtree<br>.cloneNode(false);  // only initial node - no contents<br>.cloneNode();  // defaults to false!<br>// example...<br>var clonedNode = someNode.cloneNode(true);<br>// NOTE: Always use true argument by default, because I'd never want to clone a parent without its children, right?
What is the method to copy someNode?	.cloneNode(true);<br>// (true means to add its contents)<br>var clonedNode = someNode.cloneNode(true);
delete the first child node of ulNode	ulNode.removeChild(ulNode.firstChild);
If a node passed into appendChild() or insertBefore() is already part of the document, it is removed from its previous location when placed into the new location. Why?	No DOM node can exist in more than one location in a document.
What is returned from .appendChild() and .insertBefore() ?	The newly-added node.
What is returned from .replaceChild(newNode, oldNode) ?	oldNode - The deleted node (NOT the newly-added node like appendChild() and insertBefore()!)
What are the 2 parameters of someNode.insertBefore() ?	parentNode.insertBefore(nodeToInsert, nodeItGoesBefore);<br>If 2nd parameter is nil, it puts it at the end - same as appendChild();
document.nodeType === _?  (what number?)	document.nodeType === 9;
document.nodeName === '_________'; (what string?)	document.nodeName === '#document';
How many children does an HTML document have?	One: the &lt;html&gt;&lt;/html&gt;.<br>Note: browser support for comments outside the &lt;html&gt; tag really varies, so ignore it.
What is the most common way to get the HTML &lt;body&gt;&lt;/body&gt; node?	document.body;
Why don't we use document.doctype to get the &lt;!DOCTYPE&gt; much?	Browser support varies wildly, making it pretty useless.
Why aren't appendChild(), removeChild(), or replaceChild() used on document node?	Since document only has one child: &lt;html&gt;, and doctype is read-only.
What property has the &lt;title&gt;Title of the web page&lt;/title&gt;?	document.title;
Change the &lt;title&gt; of the web page.	document.title = 'New title';
When I say...<br>document.title = 'New Title';<br>... what else changes?	Nothing. The contents of the &lt;title&gt;Old Title&lt;/title&gt; node stay the same.
Get the complete URL of the page.	document.URL;<div>// or</div><div>location.href;</div>
Get the domain name of the page.	document.domain;
Get the referrer to this page.	document.referrer;  // empty string if none
var someNode = getElementById('myDiv');<br>What are two reasons that this would return null?	1. It doesn't exist on the page.<br>2. IDs are case-sensitive. Maybe I meant 'mydiv'
What's a good reason to not use form element names that are the same as different element IDs?	IE 7 and earlier will accidently grab the form element with that name, instead of the element with that ID.
document.getElementsByTagName('img');<br>What does this return?	An HTMLCollection object - very similar to a NodeList - in that it's a &quot;live&quot; collection, like a query.
How many &lt;img&gt; tags are in this document?	document.getElementsByTagName('img').length;<br>// or its shortcut<br>document.images.length;
Add a &lt;p&gt;Hello.&lt;/p&gt; to the page as it is being loaded.	&lt;html&gt;&lt;body&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>document.write('&lt;p&gt;Hello.&lt;/p&gt;');<br>// note: MUST be inline like this, not added after document is created<br>&lt;/script&gt;<br>&lt;/body&gt;&lt;/html&gt;
Why must document.write() be called inline, instead of in footer or window.onload?	If document.write() is called after the page has been completely loaded, it overwrites the entire page!
For an Element type, what is an alias of .nodeName?	.tagName;
var el = getElementById('myDiv');<br>if(el.tagName == 'div') { }<br>// Why is this comparison error prone? What is the solution?	In HTML pages, an Element's nodeName/tagName is always upper-case.<br>In XHTML/XML it's the same as the source code.<br>So better to do .toLowerCase() when comparing it:<br>if(el.tagName.toLowerCase() == 'div') { }
All HTML elements (h1, p, a, div, etc) are represented by the ___________ type, which inherits from Element.	HTMLElement
&lt;div id=&quot;boo&quot; class=&quot;blah&quot; title=&quot;welcome message&quot; lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;/div&gt;<br>What are the properties used to get and set this HTMLElement's attributes?	.id<br>.className<br>.title<br>.lang<br>.dir
var d = document.getElementById('mydiv');<br />Get the lang. Delete the title. Update the class.	var lang = d.lang;<br />d.title = null;<br />d.class = 'highlight';<div>// ALTERNATE, though not recommended:</div><div>var lang = d.getAttribute('lang');<br />d.removeAttribute('title');<br />d.setAttribute('class', 'highlight');<br /></div>
Write a &lt;div&gt; with a custom attribute, HTML5-friendly, then get it with JS.	&lt;div id=&quot;a&quot; data-music=&quot;Fela&quot;&gt;&lt;/div&gt;<br>var music = document.getElementById('a').getAttribute('data-music');
Why avoid .getAttribute() and .setAttribute() for everything except custom attributes?	There are browser differences, but the values are the same as using HTMLElement properties directly.  So use those.<br>// example of what to do:<br>var el = document.getElementById('content');<br>var cn = el.className;<br>el.title = 'add a title';
Create a new &lt;section&gt; element, with id=&quot;last&quot; and class=&quot;news&quot;, then add it to bottom of &lt;body&gt;&lt;/body&gt;	var sec = document.createElement('section');<br>sec.id = 'last';<br>sec.className = 'news';<br>document.body.appendChild(sec);
If going through childNodes of a &lt;ul&gt; to get the &lt;li&gt;s, show two ways to make sure you're skipping the white space text nodes, and only getting the elements.	// #1 = check the nodeType<br />for(var i = 0, len = ulNode.childNodes.length; i &lt; len; i++) {<br />&nbsp; if(ulNode.childNodes[i].nodeType === 1) {<br />&nbsp; }<div>}<br />// #2 = use getElementsByTagName<br />var lis = ulNode.getElementsByTagName('li');</div>
Add ' &amp;lt;&amp;quot;me &amp;amp; he&amp;quot;&amp;gt;' to the end of &lt;p id=&quot;welcome&quot;&gt;Welcome.&lt;/p&gt; existing text content.	var t = document.getElementById('welcome').firstChild;<br>t.appendData(' &lt;&quot;me &amp; he&quot;&gt;');  // escapes HTML automatically
Delete 'lcome' from &lt;p id=&quot;welcome&quot;&gt;Welcome.&lt;/p&gt; Text node.	var t = document.getElementById('welcome').firstChild;<br>t.deleteData(2, 5);  // (offset, chars)
Insert 'do', changing 'are' to 'adore' in this Text node: &lt;p id=&quot;welcome&quot;&gt;We are you.&lt;/p&gt;	var t = document.getElementById('welcome').firstChild;<br>t.insertData(4, 'do');
"Replace 'are' with 'really like' in this Text node: &lt;p id=""welcome""&gt;We are you.&lt;/p&gt;"	var t = document.getElementById('welcome').firstChild;<br>t.replaceData(3, 3, 'really like');
"Completely replace hi with a better message by rewriting the Text node.  &lt;p id=""welcome""&gt;hi&lt;/p&gt;"	document.getElementById('welcome').firstChild.nodeValue = 'You are very welcome here.';<div>// or</div><div>document.getElementById('welcome').innerHTML = You are very welcome here.';</div>
&lt;p&gt;Hi.&lt;/p&gt;<br>Add this to &lt;div id=&quot;content&quot;&gt; by making a new Element node and new Text node.	var p = document.createElement('p');<br>var t = document.createTextNode('Hi.');<br>p.appendChild(t);<br>document.getElementById('content').appendChild(p);
"Create a function loadScript(url) that adds a &lt;script type=""text/javascript"" src=""url""&gt;&lt;/script&gt; to the document.body."	function loadScript(url) {<br />&nbsp; var s = document.createElement('script');<br />&nbsp; s.type = 'text/javascript';<br />&nbsp; s.src = url;<br />&nbsp; document.body.appendChild(s);<br />}
Get the one &lt;li class=&quot;important&quot;&gt; node (or null if none).	document.querySelector('li.important');
Get all the &lt;p class=&quot;first&quot;&gt; nodes.	document.querySelectorAll('p.first');
Get just the &lt;strong&gt; nodes that are inside &lt;p&gt; nodes.	document.querySelectorAll('p strong');
What is returned from .querySelectorAll() ?	A static instance of NodeList - (unchanging. a snapshot.)<br>If none found, an empty NodeList.
What is returned from .querySelector() ?	An HTMLElement, or null if none matching.
What 5 new API properties get just the Elements inside of childNodes, firstChild, previousSibling, etc?	Element Traversal. The new properties (IE9+, +rest), are:<br>.childElementCount<br>.firstElementChild<br>.lastElementChild<br>.previousElementSibling<br>.nextElementSibling
HTML5 method for selecting all elements with a certain class	.getElementsByClassName()<br>But it's only in IE9+ - whereas .querySelectorAll() is in IE8.
focus the first input on the page.	document.getElementsByTagName('input')[0].focus();<br>// or<br>document.querySelector('input').focus();
HTML5 property that gets the HTMLElement node currently in focus	document.activeElement;
What is document.activeElement by default, while loading, and after loading?	null while loading<br>document.body when fully loaded
HTML5 boolean: is someNode currently the active element?	someNode.hasFocus()<br>// and since document is the default focus...<br>if(document.hasFocus()) {<br>  // they are looking at this fully-loaded page<br>}
document property : is the document loading or fully loaded?  What two strings are returned?	document.readyState returns either 'loading' or 'complete'<br>if(document.readyState == 'complete') {<br>  // HTML5, but this is supported in IE 4+! Quite safe to use<br>}
Since document.head is only in Chrome, show a fallback way to get it.	var h = document.head || document.getElementsByTagName('head')[0];
What charset is being used by this page?	document.charset;
Quick and dirty way to make the elements &lt;header&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/header&gt; the full contents of someNode?	someNode.innerHTML = '&lt;header&gt;&lt;h1&gt;hello&lt;/h1&gt;&lt;/header&gt;';
Don't use innerHTML to set what 2 types of elements?	&lt;script&gt; // JavaScript<br>&lt;style&gt;  // CSS<br>// ... because IE has quirks around it. Not worth it.
As a previousSibling to someNode, add &lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;	someNode.insertAdjacentHTML('beforebegin', '&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;');
As a nextSibling to someNode, add &lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;	someNode.insertAdjacentHTML('afterend', '&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;');
As a firstChild inside someNode, add &lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;	someNode.insertAdjacentHTML('afterbegin', '&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;');
As a lastChild inside someNode, add &lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;	someNode.insertAdjacentHTML('beforeend', '&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt; are it.&lt;/p&gt;');
Make sure the browser can see &lt;div id=&quot;footer&quot;&gt; in its view.	document.getElementById('footer').scrollIntoView();
